---
name: build-and-test
on:
  push:
    branches:
      - "main"
      - "websockets"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"

  workflow_dispatch:

env:
  MACHINE: qemux86-64
  CONTAINER_ARCH: amd64
  BITBAKE_GITREV: "f3ba9c3726ec7b38b557100d8a2d4b6a1446a968"

jobs:
  create-layer-cache:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver

      - name: Restore layer cache
        id: restore-layer-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"

      - name: Setup layers
        run: |
          ./meta-bitbake-hashserver/scripts/setup-layers

      - name: Save layer cache
        if: steps.restore-layer-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"

      - name: Restore bitbake git cache
        id: bitbake-git-cache
        uses: actions/cache/restore@v3
        with:
          path: bitbake
          key: "bitbake-git-${{ env.BITBAKE_GITREV }}"

      - name: Checkout bitbake
        if: steps.bitbake-git-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://git.openembedded.org/bitbake
          git -C bitbake checkout $BITBAKE_GITREV

      - name: Save bitbake git cache
        if: steps.bitbake-git-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: bitbake
          key: "bitbake-git-${{ env.BITBAKE_GITREV }}"

  validate-layers:
    needs:
      - create-layer-cache
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver
          # Have the fetch the entire repo to validate the commits
          fetch-depth: 0

      - name: Restore layer cache
        uses: actions/cache/restore@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"
          fail-on-cache-miss: true

      - name: Validate layer JSON
        run: |
          ./meta-bitbake-hashserver/scripts/validate-layer-json.py

  yocto-check-layer:
    needs:
      - create-layer-cache

    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver

      - name: Restore layer cache
        uses: actions/cache/restore@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"
          fail-on-cache-miss: true

      - name: Restore bitbake git cache
        uses: actions/cache/restore@v3
        with:
          path: bitbake
          key: "bitbake-git-${{ env.BITBAKE_GITREV }}"
          fail-on-cache-miss: true

      - name: Install build dependencies
        run: |
          sudo apt update -y && sudo apt install -y \
            gawk wget git diffstat unzip texinfo gcc build-essential chrpath \
            socat cpio python3 python3-pip python3-pexpect xz-utils debianutils \
            iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
            python3-subunit mesa-common-dev zstd liblz4-tool file locales

      - name: Restore yocto-check-layers cache
        id: restore-yocto-check-layers-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/cache
          key: "yocto-check-layers-${{ github.sha }}"
          restore-keys: |
            yocto-check-layers-

      - name: Run yocto-check-layer
        id: run-yocto-check-layer
        # Don't run this on tag pushes. This step is skipped as opposed to the
        # entire job so that dependent jobs will still run
        if: github.event_name != 'push' || ! startsWith(github.ref, 'refs/tags/')
        run: |
          . ./core/oe-init-build-env

          $GITHUB_WORKSPACE/core/scripts/yocto-check-layer \
              $GITHUB_WORKSPACE/meta-bitbake-hashserver \
              --no-auto-dependency \
              --dependency \
                  $GITHUB_WORKSPACE/meta-openembedded/meta-python \
                  $GITHUB_WORKSPACE/meta-openembedded/meta-networking \
                  $GITHUB_WORKSPACE/meta-openembedded/meta-oe \
                  $GITHUB_WORKSPACE/meta-virtualization \
                  $GITHUB_WORKSPACE/meta-openembedded/meta-filesystems/ \
              --machines \
                  $MACHINE

      - name: Save yocto-check-layers cache
        if: steps.restore-yocto-check-layers-cache.outputs.cache-hit != 'true' && steps.run-yocto-check-layer.outcome == 'success'
        uses: actions/cache/save@v3
        with:
          path: |
            build/cache
          key: "yocto-check-layers-${{ github.sha }}"

  build:
    needs:
      - create-layer-cache
      - validate-layers

    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver

      - name: Restore layer cache
        uses: actions/cache/restore@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"
          fail-on-cache-miss: true

      - name: Restore bitbake git cache
        uses: actions/cache/restore@v3
        with:
          path: bitbake
          key: "bitbake-git-${{ env.BITBAKE_GITREV }}"
          fail-on-cache-miss: true

      - name: Restore build cache
        id: restore-build-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/sstate-cache
            build/cache
          key: "build-cache-${{ github.sha }}"
          restore-keys: |
            build-cache-
            bitbake-cache-
            bitbake-cache

      - name: Install build dependencies
        run: |
          sudo apt update -y && sudo apt install -y \
            gawk wget git diffstat unzip texinfo gcc build-essential chrpath \
            socat cpio python3 python3-pip python3-pexpect xz-utils debianutils \
            iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
            python3-subunit mesa-common-dev zstd liblz4-tool file locales

      - name: Setup layers
        run: |
          ./meta-bitbake-hashserver/scripts/setup-layers

      - name: Build
        run: |
          TEMPLATECONF=$(pwd)/meta-bitbake-hashserver/conf/templates/bitbake-hashserver . ./core/oe-init-build-env build

          cat >> conf/auto.conf <<HEREDOC
          INHERIT += "rm_work"
          OCI_IMAGE_LABELS:append = " org.opencontainers.image.source='${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}'"
          HEREDOC

          bitbake \
            bitbake-hashserver-container-image \
            bitbake-hashserver-test-container-image \
            bitbake-hashclient-container-image \
            bitbake-hashserver-web-ui-container-image

      - name: Copy build artifacts
        run: |
          for IMAGE_NAME in bitbake-hashserver bitbake-hashserver-test bitbake-hashclient bitbake-hashserver-web-ui; do
            cp -L build/tmp-glibc/deploy/images/$MACHINE/$IMAGE_NAME-container-image-$MACHINE.rootfs-*-oci.tar \
              ./$IMAGE_NAME-${CONTAINER_ARCH}-oci.tar
            cp -L build/tmp-glibc/deploy/images/$MACHINE/$IMAGE_NAME-container-image-$MACHINE.rootfs.spdx.tar.zst \
              ./$IMAGE_NAME-${CONTAINER_ARCH}-spdx.tar.zst
          done

      # Can't run this yet because its not correctly set by meta-virt for x86_64
      #- name: Validate container arch
      #  run: |
      #    [ $(skopeo inspect oci-archive:./${IMAGE_NAME}-${CONTAINER_ARCH}-oci.tar | jq -r .Architecture) == "${CONTAINER_ARCH}" ]

      - name: Save build cache
        if: steps.restore-build-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            build/sstate-cache
            build/cache
          key: "build-cache-${{ github.sha }}"

      - name: Save Server OCI image
        uses: actions/upload-artifact@v3
        with:
          name: "bitbake-hashserver-${{ env.CONTAINER_ARCH }}-oci"
          path: "bitbake-hashserver-${{ env.CONTAINER_ARCH }}-oci.tar"

      - name: Save Server SPDX
        uses: actions/upload-artifact@v3
        with:
          name: "bitbake-hashserver-${{ env.CONTAINER_ARCH }}-spdx"
          path: "bitbake-hashserver-${{ env.CONTAINER_ARCH }}-spdx.tar.zst"

      - name: Save Server OCI test image
        uses: actions/upload-artifact@v3
        with:
          name: "bitbake-hashserver-test-${{ env.CONTAINER_ARCH }}-oci"
          path: "bitbake-hashserver-test-${{ env.CONTAINER_ARCH }}-oci.tar"

      - name: Save Client OCI image
        uses: actions/upload-artifact@v3
        with:
          name: "bitbake-hashclient-${{ env.CONTAINER_ARCH }}-oci"
          path: "bitbake-hashclient-${{ env.CONTAINER_ARCH }}-oci.tar"

      - name: Save Client SPDX
        uses: actions/upload-artifact@v3
        with:
          name: "bitbake-hashclient-${{ env.CONTAINER_ARCH }}-spdx"
          path: "bitbake-hashclient-${{ env.CONTAINER_ARCH }}-spdx.tar.zst"

      - name: Save Web UI OCI image
        uses: actions/upload-artifact@v3
        with:
          name: "bitbake-hashserver-web-ui-${{ env.CONTAINER_ARCH }}-oci"
          path: "bitbake-hashserver-web-ui-${{ env.CONTAINER_ARCH }}-oci.tar"

      - name: Save Web UI SPDX
        uses: actions/upload-artifact@v3
        with:
          name: "bitbake-hashserver-web-ui-${{ env.CONTAINER_ARCH }}-spdx"
          path: "bitbake-hashserver-web-ui-${{ env.CONTAINER_ARCH }}-spdx.tar.zst"

  image-ptest:
    needs:
      - build
    runs-on: ubuntu-22.04
    steps:
      - name: Download OCI test image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashserver-test-${{ env.CONTAINER_ARCH }}-oci"

      - name: Load test image
        run: |
          podman load -i ./bitbake-hashserver-test-${CONTAINER_ARCH}-oci.tar

      - name: Run tests
        run: |
          podman run --rm -it localhost/bitbake-hashserver-test-container-image:latest

  server-image-test:
    needs:
      - build
    runs-on: ubuntu-22.04
    steps:
      - name: Download Server OCI image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashserver-${{ env.CONTAINER_ARCH }}-oci"

      - name: Load image
        run: |
          podman load -i ./bitbake-hashserver-${CONTAINER_ARCH}-oci.tar

      - name: Validate image can run
        run : |
          podman run --rm -it localhost/bitbake-hashserver-container-image:latest --help

      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver

      - name: Copy image to docker
        run: |
          skopeo copy oci-archive:bitbake-hashserver-${CONTAINER_ARCH}-oci.tar docker-daemon:bitbake-hashserver:latest

      - name: Start containers
        working-directory: ./meta-bitbake-hashserver/test/hashserver/
        run: |
          docker-compose up --detach

      - name: Download OCI test image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashserver-test-${{ env.CONTAINER_ARCH }}-oci"

      - name: Load test image
        run: |
          podman load -i ./bitbake-hashserver-test-${CONTAINER_ARCH}-oci.tar

      - name: Run tests
        run: |
          podman run --rm -it --net=host \
            --entrypoint /usr/share/bitbake-hashserver/bin/bitbake-selftest \
            --env BB_TEST_HASHSERV=ws://localhost:9000 \
            --env BB_TEST_HASHSERV_USERNAME=admin \
            --env BB_TEST_HASHSERV_PASSWORD=secret \
            localhost/bitbake-hashserver-test-container-image:latest \
            -v hashserv.tests.TestHashEquivalenceExternalServer

  client-image-test:
    needs:
      - build
    runs-on: ubuntu-22.04
    steps:
      - name: Download Client OCI image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashclient-${{ env.CONTAINER_ARCH }}-oci"

      - name: Load image
        run: |
          podman load -i ./bitbake-hashclient-${CONTAINER_ARCH}-oci.tar

      - name: Validate image can run
        run : |
          podman run --rm -it localhost/bitbake-hashclient-container-image:latest --help

  webui-image-test:
    needs:
      - build
    runs-on: ubuntu-22.04
    steps:
      - name: Download Server OCI image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashserver-${{ env.CONTAINER_ARCH }}-oci"

      - name: Copy Server image to docker
        run: |
          skopeo copy oci-archive:bitbake-hashserver-${CONTAINER_ARCH}-oci.tar docker-daemon:bitbake-hashserver:latest

      - name: Download Web UI OCI image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashserver-web-ui-${{ env.CONTAINER_ARCH }}-oci"

      - name: Copy Web UI to docker
        run: |
          skopeo copy oci-archive:bitbake-hashserver-web-ui-${CONTAINER_ARCH}-oci.tar docker-daemon:bitbake-hashserver-web-ui:latest

      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver

      - name: Start containers
        working-directory: ./meta-bitbake-hashserver/test/web-ui/
        run: |
          docker-compose up --detach

      - name: Check server is running
        run: |
          for i in $(seq 10); do
            if curl -v http://localhost:8000/; then
              exit 0
            fi
            sleep 10
          done
          echo "Unable to connect to server"
          exit 1

  publish:
    if: github.event_name == 'push'
    needs:
      - build
      - image-ptest
      - server-image-test
      - client-image-test
      - webui-image-test
      - yocto-check-layer

    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-22.04
    steps:
      - name: Download Server OCI image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashserver-${{ env.CONTAINER_ARCH }}-oci"

      - name: Download Client OCI image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashclient-${{ env.CONTAINER_ARCH }}-oci"

      - name: Download Web UI OCI image
        uses: actions/download-artifact@v3
        with:
          name: "bitbake-hashserver-web-ui-${{ env.CONTAINER_ARCH }}-oci"

      - name: Login to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | skopeo login ghcr.io --username $ --password-stdin

      - name: Push image
        run: |
          for IMAGE_NAME in bitbake-hashserver bitbake-hashclient bitbake-hashserver-web-ui; do
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

            # This changes all uppercase characters to lowercase.
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

            # This strips the git ref prefix from the version.
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

            # This strips the "v" prefix from the tag name.
            [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

            # This uses the Docker `latest` tag convention.
            [ "$VERSION" == "main" ] && VERSION=latest
            [ "$VERSION" == "master" ] && VERSION=latest

            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION

            skopeo copy oci-archive:${IMAGE_NAME}-${CONTAINER_ARCH}-oci.tar docker://$IMAGE_ID:$VERSION
          done
