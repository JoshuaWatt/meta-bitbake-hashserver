From 194053aa43e0d96ad5607b18f925c73d9e7d9087 Mon Sep 17 00:00:00 2001
From: Joshua Watt <JPEWhacker@gmail.com>
Date: Wed, 11 Oct 2023 13:03:20 -0600
Subject: [PATCH 11/17] hashserv: Implement read-only version of "report" RPC

When the hash equivalence server is in read-only mode, it should still
return a unihash for a given "report" call if there is one.

Signed-off-by: Joshua Watt <JPEWhacker@gmail.com>
---
 lib/hashserv/server.py | 7 ++++++-
 lib/hashserv/tests.py  | 4 ++--
 2 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/lib/hashserv/server.py b/lib/hashserv/server.py
index f8ea649a..de38e675 100644
--- a/lib/hashserv/server.py
+++ b/lib/hashserv/server.py
@@ -131,13 +131,15 @@ class ServerClient(bb.asyncrpc.AsyncServerConnection):
                 "get-outhash": self.handle_get_outhash,
                 "get-stream": self.handle_get_stream,
                 "get-stats": self.handle_get_stats,
+                "report": (
+                    self.handle_report_get_unihash if read_only else self.handle_report
+                ),
             }
         )
 
         if not read_only:
             self.handlers.update(
                 {
-                    "report": self.handle_report,
                     "report-equiv": self.handle_equivreport,
                     "reset-stats": self.handle_reset_stats,
                     "backfill-wait": self.handle_backfill_wait,
@@ -322,6 +324,9 @@ class ServerClient(bb.asyncrpc.AsyncServerConnection):
 
             await self.db.insert_unihash(data["method"], data["taskhash"], unihash)
 
+        return await self.handle_report_get_unihash(data)
+
+    async def handle_report_get_unihash(self, data):
         unihash_data = await self.get_unihash(data["method"], data["taskhash"])
         if unihash_data is not None:
             unihash = unihash_data["unihash"]
diff --git a/lib/hashserv/tests.py b/lib/hashserv/tests.py
index 268b2700..e9a361dc 100644
--- a/lib/hashserv/tests.py
+++ b/lib/hashserv/tests.py
@@ -387,8 +387,8 @@ class HashEquivalenceCommonTests(object):
         outhash2 = '3c979c3db45c569f51ab7626a4651074be3a9d11a84b1db076f5b14f7d39db44'
         unihash2 = '90e9bc1d1f094c51824adca7f8ea79a048d68824'
 
-        with self.assertRaises(ConnectionError):
-            ro_client.report_unihash(taskhash2, self.METHOD, outhash2, unihash2)
+        result = ro_client.report_unihash(taskhash2, self.METHOD, outhash2, unihash2)
+        self.assertEqual(result['unihash'], unihash2)
 
         # Ensure that the database was not modified
         self.assertClientGetHash(rw_client, taskhash2, None)
-- 
2.34.1

