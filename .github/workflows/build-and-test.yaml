---
name: build-and-test
on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"

  workflow_dispatch:


jobs:
  validate-layers:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver
          # Have the fetch the entire repo to validate the commits
          fetch-depth: 0

      - name: Restore layer cache
        uses: actions/cache/restore@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"
          restore-keys: |
            layer-cache-

      - name: Setup layers
        run: |
          ./meta-bitbake-hashserver/scripts/setup-layers

      - name: Validate layer JSON
        run: |
          ./meta-bitbake-hashserver/scripts/validate-layer-json.py

      - name: Save layer cache
        if: ${{ ! cancelled() }}
        uses: actions/cache/save@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"

  build:
    needs:
      - validate-layers
    env:
      MACHINE: qemux86-64
      BITBAKE_GITREV: "f3ba9c3726ec7b38b557100d8a2d4b6a1446a968"

    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          path: meta-bitbake-hashserver

      - name: Restore layer cache
        uses: actions/cache/restore@v3
        with:
          path: |
            core
            meta-openembedded
            meta-virtualization
          key: "layer-cache-${{ hashFiles('meta-bitbake-hashserver/scripts/setup-layers.json') }}"
          restore-keys: |
            layer-cache-

      - name: Restore build cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/sstate-cache
            build/cache
          key: "build-cache-${{ github.sha }}"
          restore-keys: |
            build-cache-
            bitbake-cache-
            bitbake-cache

      - name: Install build dependencies
        run: |
          sudo apt update -y && sudo apt install -y \
            gawk wget git diffstat unzip texinfo gcc build-essential chrpath \
            socat cpio python3 python3-pip python3-pexpect xz-utils debianutils \
            iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
            python3-subunit mesa-common-dev zstd liblz4-tool file locales \
            podman

      - name: Restore bitbake git cache
        id: bitbake-git-cache
        uses: actions/cache/restore@v3
        with:
          path: bitbake
          key: "bitbake-git-${{ env.BITBAKE_GITREV }}"

      - name: Checkout bitbake
        if: steps.bitbake-git-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://git.openembedded.org/bitbake
          git -C bitbake checkout $BITBAKE_GITREV

      - name: Save bitbake git cache
        if: steps.bitbake-git-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: bitbake
          key: "bitbake-git-${{ env.BITBAKE_GITREV }}"

      - name: Setup layers
        run: |
          ./meta-bitbake-hashserver/scripts/setup-layers

      - name: Initialize build
        run: |
          TEMPLATECONF=$(pwd)/meta-bitbake-hashserver/conf/templates/bitbake-hashserver . ./core/oe-init-build-env build
          cat >> conf/local.conf <<HEREDOC
          INHERIT += "rm_work"
          PTEST_ENABLED:pn-bitbake-hashserver = "1"
          HEREDOC

      - name: Build
        run: |
          . ./core/oe-init-build-env build

          echo "" > conf/auto.conf

          bitbake \
            bitbake-hashserver-container-image \
            bitbake-hashserver-test-container-image

      - name: Copy build artifacts
        run: |
          cp -L build/tmp-glibc/deploy/images/$MACHINE/bitbake-hashserver-container-image-$MACHINE.rootfs-*-oci.tar \
            ./oci-$MACHINE.tar
          cp -L build/tmp-glibc/deploy/images/$MACHINE/bitbake-hashserver-test-container-image-$MACHINE.rootfs-*-oci.tar \
            ./oci-test-$MACHINE.tar
          cp -L build/tmp-glibc/deploy/images/$MACHINE/bitbake-hashserver-container-image-$MACHINE.rootfs.spdx.tar.zst \
            ./spdx-$MACHINE.tar.zst

      - name: Load test image
        run: |
          podman load -i ./oci-test-$MACHINE.tar

      - name: Run tests
        run: |
          podman run --rm -it localhost/bitbake-hashserver-test-container-image:latest

      - name: Save build cache
        if: ${{ ! cancelled() }}
        uses: actions/cache/save@v3
        with:
          path: |
            build/sstate-cache
            build/cache
          key: "build-cache-${{ github.sha }}"

      - name: Save OCI image
        uses: actions/upload-artifact@v3
        with:
          name: bitbake-hashserver-oci
          path: "oci-${{ env.MACHINE }}.tar"

      - name: Save SPDX
        uses: actions/upload-artifact@v3
        with:
          name: bitbake-hashserver-spdx
          path: "spdx-${{ env.MACHINE }}.tar.zst"

      - name: Save OCI test image
        uses: actions/upload-artifact@v3
        with:
          name: bitbake-hashserver-test-oci
          path: "oci-test-${{ env.MACHINE }}.tar"

  publish:
    needs:
      - build
    env:
      MACHINE: qemux86-64
      IMAGE_NAME: "bitbake-hashserver"

    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-22.04
    steps:
      - name: Download OCI image
        uses: actions/download-artifact@v3
        with:
          name: bitbake-hashserver-oci

      - name: Login to registry
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | skopeo login ghcr.io --username $ --password-stdin

      - name: Push image
        if: ${{ github.event_name == 'push' }}
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # This strips the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # This strips the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          skopeo copy oci-archive:oci-$MACHINE.tar docker://$IMAGE_ID:$VERSION
